}
return(count)
}
result <- get_upper(c(1,3,2,5)) #result returns 2, which is correct
#getting solution to 2.2
vec_sum_upper <- get_upper(vec_sum)  # 25
library(MASS) # access to Boston data frame
data(mtcars) # data on motor trend car road tests
library(dplyr) # data wrangling package. See Chapter 10 in INFO 201 textbook
library(ggplot2) # plotting library. See Chapter 13 of INFO 201 textbook
View(mtcars) # see the dataframe
mean_horsepower <- mean(mtcars$hp) #136.6875
#3.2
four_cyl_cars <- filter(mtcars, mtcars$cyl == 4)
mean_four_cyl_hp <- mean(four_cyl_cars$hp) #82.636
#3.3
disp_between <- filter(mtcars, mtcars$disp >= 100 & mtcars$disp <= 200)
mean_mpg_disp <- mean(disp_between$mpg) #21.6
#4.4
ggplot(data = mtcars) + geom_point(mapping= aes(x=disp, y = mpg))
MPG_KML_RATIO <- 0.35400619 # 1 Miles/Gallon = 0.35 Kilometer/Liter
CIN_L_RATIO <- 0.0163871 # 1 cubic inch = 0.016 Liter
# Add a column "kml" to the mtcars dataframe which provides the kilometers / liter for each car. The conversion from MPG to KML is provided by MPG_KML_RATIO.
mtcars$kml <- mtcars$mpg * MPG_KML_RATIO
# Add a column "disp_l" to the mtcars dataframe which provides the displacement for each car in liters. The conversion from cubic inches to liters is provided by CIN_L_RATIO.
mtcars$disp_l <- mtcars$disp * CIN_L_RATIO
# Convert mtcars$cyl to a factor (see Chapter 9.3)
mtcars$cyl <- as.factor(mtcars$cyl)
# Show 4.1 and 4.2 below!
#4.1
ggplot(data=mtcars) + geom_point(mapping = aes(x=disp_l, y=kml,color=cyl)) + labs(title="Metric dispacement vs Efficiency", x="Vehicle Displacement in Liters", y = "Kilometers/Liter")
```
boston <- Boston
View(boston) # Viewing data
?Boston # getting more information on the dataset
top_5_per_capita <- head(arrange(boston,desc(crim)),n=5)
charles_riv_bound <- filter(boston, chas=1)
charles_riv_bound <- filter(boston, chas==1)
top_5_per_capita <- head(arrange(charles_riv_bound,desc(crim)),n=5)
top_5_per_capita_charles <- head(arrange(charles_riv_bound,desc(crim)),n=5)
med_owner_charles <- select(top_5_per_capita_charles, medv)
View(med_owner_charles)
View(top_5_per_capita_charles)
View(boston)
View(boston)
not_charles_riv_bound <- filter(boston, chas==0)
top_5_per_capita_no_charles <- head(arrange(not_charles_riv_bound,desc(crim)),n=5)
med_owner_no_charles <- select(top_5_per_capita_no_charles, medv)
View(med_owner_no_charles)
?mtcars # learn more about the dataframe
View(mtcars) # see the dataframe
mean_horsepower <- mean(mtcars$hp) #136.6875
#3.2
four_cyl_cars <- filter(mtcars, mtcars$cyl == 4)
mean_four_cyl_hp <- mean(four_cyl_cars$hp) #82.636
#3.3
disp_between <- filter(mtcars, mtcars$disp >= 100 & mtcars$disp <= 200)
mean_mpg_disp <- mean(disp_between$mpg) #21.6
#4.4
ggplot(data = mtcars) + geom_point(mapping= aes(x=disp, y = mpg))
result <- get_upper(c(1,3,2,5)) #result returns 2, which is correct
result
vec_sum_upper <- get_upper(vec_sum)  # 25
vec_sum_upper
install.packages("rethinking")
library(rethinking)
install.packages("rethinking")
w<-6
n <- 9
curve(dbeta(x, w=1, n=1), from=0,to=1)
curve(dbeta(x, w+1, n-w+1), from=0,to=1)
curve(dnorm(x, 0.67,0.16) lty=2,add=TRUE)
curve(dnorm(x, 0.67,0.16), lty=2,add=TRUE)
PrPV <- 0.95
PrPM <-0.01
PrV <- 0.001
PrP <- PrPV*PrV + PrPrPM*(1-PrV)
PrP <- PrPV*PrV + PrPM*(1-PrV)
(PrVP <- PrPV*PrV / PrP)
PrVP
p_grid <- seq(from=0, to=1, length.out=1000)
prior <- rep(1,1000)
likelihood <- dbinom (6, size=9, prob=p_grid)
posterior <- likelihood * prior
posterior <- posterior/sum(posterior)
samples <- sample(p_grid, prob=posterior, size=1e4,replace=true)
samples <- sample(p_grid, prob=posterior, size=1e4,replace=TRUE)
plot(samples)
dens(samples)
dbinom(0:2, size=2, prob=0.7)
rbinom(1, size=2, prob=0.7)
rbinom(1, size=2, prob=0.7)
dummy_w <- rbinom (1e5, size=9, prob=0.7)
simplehist(dummy_w, xlab="dummy water count")
prior<- rep(1,1000)
# If you have not previously installed the "Rethinking" library, uncomment and run the lines below:
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
?rethinking # run me for documentation on the package!
set.seed(370) # so everyone's randomness is the same
# 1.2
prior <- c(1,1)
likelihood <- c(.2,.15)
posterior <- prior * likelihood/sum(likelihood)
# 1.2
prior <- c(1,1)
likelihood <- c(.2,.15)
posterior <- prior * likelihood/sum(likelihood)
sum(posterior)
posterior
#1.3
prior2 <- posterior
posterior2 <- prior2*likelihood/sum(likelihood)
posterior2 <- prior2*likelihood
posterior2 <- prior2*likelihood/sum(posterior2)
posterior2 <- prior2*likelihood
posterior2 <- prior2*likelihood/sum(posterior2)
posterior <- prior * likelihood/sum(posterior)
posterior <- prior * likelihood/sum(likelihood)
posterior <- prior * likelihood
# 1.2
prior <- c(1,1)
likelihood <- c(.2,.15)
posterior <- prior * likelihood
posterior <- posterior/sum(posterior)
#1.3
prior2 <- posterior
posterior2 <- prior2*likelihood
posterior2 <- posterior2/sum(posterior2)
posterior <- posterior/mean(likelihood)
posterior <- posterior/mean(posterior)
posterior <- posterior/sum(posterior)
#1.3
prior2 <- posterior
posterior2 <- prior2*likelihood
posterior2 <- posterior2/sum(posterior2)
likelihood2 <- c(.15*.85, .2*.8)
posterior2 <- prior2*likelihood2
posterior2 <- posterior2/sum(posterior2)
likelihood2 <- c(.2*.8, .15*.85)
#1.3
prior2 <- posterior
likelihood2 <- c(.2*.8, .15*.85)
posterior2 <- prior2*likelihood2
posterior2 <- posterior2/sum(posterior2)
install.packages("tidyverse")
library(modelr)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
options(na.action=na.warn)
sim1a <- tibble(
x= rep(1:10, each=3),
y=1.5*x + 6 + rt(length(x),df=2)
)
library(modelr)
library(tidyverse)
options(na.action=na.warn)
sim1a <- tibble(
x= rep(1:10, each=3),
y=1.5*x + 6 + rt(length(x),df=2)
)
library(modelr)
library(tidyverse)
library("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("modelr")
install.packages("modelr")
install.packages("modelr")
install.packages("tidyverse")
install.packages("modelr")
install.packages("modelr")
install.packages("modelr")
install.packages("modelr")
install.packages("modelr")
install.packages("modelr")
install.packages("tidyverse")
install.packages("modelr")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
options(na.action=na.warn)
library(tidyverse)
options(na.action=na.warn)
library(modelr)
install.packages("tidyverse")
library(tidyverse)
ggplot(sim1, aes(x, y)) +
geom_point()
library(ggplot2)
ggplot(sim1, aes(x, y)) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
install.packages("tibble")
install.packages("tibble")
library(tidyverse)
library(ggplot2)
library(tibble)
library(tidyverse)
library(ggplot2)
library(modelr)
options(na.action=na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 10)
)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 10)
)
options(na.action=na.warn)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 10)
)
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
library(purrr)
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
library(dplyr)
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
ggplot(sim1, aes(x, y)) +
geom_point()
library(tibble)
library(tidyverse)
library(ggplot2)
library(modelr)
library(purrr)
library(dplyr)
options(na.action=na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 10)
)
ggplot(models, aes(a1, a2)) +
geom_point(data = filter(models, rank(dist) <= 10), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
grid <- expand.grid(
a1 = seq(-5, 20, length = 25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid %>%
ggplot(aes(a1, a2)) +
geom_point(data = filter(grid, rank(dist) <= 10), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(grid, rank(dist) <= 10)
)
best$par
best <- optim(c(0, 0), measure_distance, data = sim1)
best$par
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2])
sim1_mod <- lm(y ~ x, data = sim1)
coef(sim1_mod)
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
grid <- sim1 %>%
data_grid(x)
grid
grid <- grid %>%
add_predictions(sim1_mod)
grid
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
sim1 <- sim1 %>%
add_residuals(sim1_mod)
sim1
ggplot(sim1, aes(resid)) +
geom_freqpoly(binwidth = 0.5)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
ggplot(sim1, aes(x, y)) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 10)
)
ggplot(models, aes(a1, a2)) +
geom_point(data = filter(models, rank(dist) <= 10), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
grid <- expand.grid(
a1 = seq(-5, 20, length = 25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid %>%
ggplot(aes(a1, a2)) +
geom_point(data = filter(grid, rank(dist) <= 10), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(grid, rank(dist) <= 10)
)
best <- optim(c(0, 0), measure_distance, data = sim1)
best$par
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2])
sim1_mod <- loess(y ~ x, data = sim1)
coef(sim1_mod)
grid <- sim1 %>%
data_grid(x)
grid
grid <- grid %>%
add_predictions(sim1_mod)
grid
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
sim1 <- sim1 %>%
add_residuals(sim1_mod)
sim1
ggplot(sim1, aes(resid)) +
geom_freqpoly(binwidth = 0.5)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
sim1_mod <- lm(y ~ x, data = sim1)
coef(sim1_mod)
grid <- sim1 %>%
data_grid(x)
grid
grid <- grid %>%
add_predictions(sim1_mod)
grid
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
sim1 <- sim1 %>%
add_residuals(sim1_mod)
sim1
ggplot(sim1, aes(resid)) +
geom_freqpoly(binwidth = 0.5)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
sim1_mod <- loess(y ~ x, data = sim1)
coef(sim1_mod)
grid <- sim1 %>%
data_grid(x)
grid
grid <- grid %>%
add_predictions(sim1_mod)
grid
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
sim1 <- sim1 %>%
add_residuals(sim1_mod)
sim1
ggplot(sim1, aes(resid)) +
geom_freqpoly(binwidth = 0.5)
ggplot(sim1, aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
#install.packages("tidyverse")
library(tidyverse)
#install.packages("tidyverse")
install.packages(“forcats”)
#install.packages("tidyverse")
install.packages(“forcats”)
#install.packages("tidyverse")
install.packages("forcats")
install.packages("forcats")
library(tidyverse)
library(modelr)
options(na.action = na.warn)
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) +
geom_point()
dist1 <- sim1 %>%
mutate(
dodge = rep(c(-1, 0, 1) / 20, 10),
x1 = x + dodge,
pred = 7 + x1 * 1.5
)
slope1 <- (13405-13142)/(100-102)
slope1
slope2 <- (13405-13540)/(100-99)
slope2
slope3 <- (13405-13272)/(100-101)
slope3
slope1 <- (13272-13142)/(101-102)
slope1
matrix(c(1,2,3, 4,5,6, 7,8,9, 10,11,12), ncol=3)
diag(1:4)
diag(4)
a<-matrix(c(1,2,3, 4,5,6, 7,8,9, 10,11,12), ncol=3)
t(a)
setwd("~/Documents/INFO/INFO 474/A3")
library(dplyr)
data <- read.csv("winter_medals.csv")
data$X <- NULL
data2 <- data %>% filter(Year >= 1994)
data2$`length(Country)` <- NULL
View(data2)
write.csv(data2,file="winter_medals2.csv")
